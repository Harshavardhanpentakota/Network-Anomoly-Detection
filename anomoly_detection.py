# -*- coding: utf-8 -*-
"""anomoly_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eBaoTeJ_yX8ge7N1foij1YbCKn9ZpAkH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

plt.rcParams["figure.figsize"] = (9,6)

df = pd.read_csv('data/cpu_utilization_custom.csv')
df.head()

anomalies_timestamp = [
        "18-04-2024 02:45",
        "17-04-2024 07:35"
    ]
df.head()

df['is_anomaly'] = 1
for each in anomalies_timestamp:
    df.loc[df['timestamp'] == each, 'is_anomaly'] = -1
df.head()

anomaly_df = df.loc[df['is_anomaly'] == -1]
inlier_df = df.loc[df['is_anomaly'] == 1]
fig, ax = plt.subplots()

ax.scatter(inlier_df.index, inlier_df['value'], color='blue', s=3, label='Inlier')
ax.scatter(anomaly_df.index, anomaly_df['value'], color='red', label='Anomaly')
ax.set_xlabel('Time')
ax.set_ylabel('Server usage')
ax.legend(loc=2)

plt.grid(False)
fig.autofmt_xdate()
plt.tight_layout()

"""Mean Absolute Deviation"""

import seaborn as sns
sns.kdeplot(df['value'])
plt.grid(False)
plt.axvline(0.134,0,1,c='black',ls='--')
plt.tight_layout();

from scipy.stats import median_abs_deviation
mad=median_abs_deviation(df['value'])
median=np.median(df['value'])
print(mad,median)

def robust_zscore(x):
  return 0.6745*(x-median)/mad

"""mad~0"""

df['z-score']=df['value'].apply(robust_zscore)
df.head()

df['baseline']=1
df.loc[df['z-score']>=3.5, 'baseline']=-1
df.loc[df['z-score']<=-3.5, 'baseline']=-1

cm=confusion_matrix(df['is_anomaly'],df['baseline'], labels=[1,-1])
display_cm=ConfusionMatrixDisplay(cm,display_labels=[1,-1])
display_cm.plot();
plt.grid(False)
plt.tight_layout()

accuracy_score(df['is_anomaly'],df['baseline'])*100

"""Isolation Forest

"""

from sklearn.ensemble import IsolationForest
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay

train = df[:3550]
test = df[3550:]

contamination = 1/len(train)

i_forest= IsolationForest(contamination=contamination, random_state=42)
X_train=train['value'].values.reshape(-1,1)
i_forest.fit(X_train)

predictions=i_forest.predict(test['value'].values.reshape(-1,1))

cm=confusion_matrix(test['is_anomaly'],predictions,labels=[-1,1])
display_cm= ConfusionMatrixDisplay(cm,display_labels=[-1,1])
display_cm.plot();
plt.grid(False)
plt.tight_layout()

from sklearn.metrics import accuracy_score
y_true=test['is_anomaly']
y_pred=predictions
accuracy_score(y_true,y_pred)*100

"""Local Outlier Factor"""

from sklearn.neighbors import LocalOutlierFactor
lof=LocalOutlierFactor(contamination=contamination,novelty=True)
lof.fit(X_train)

preds_lof=lof.predict(test['value'].values.reshape(-1,1))
cm=confusion_matrix(test['is_anomaly'],preds_lof,labels=[1,-1])
display_cm=ConfusionMatrixDisplay(cm,display_labels=[1,-1])
display_cm.plot();

accuracy_score(test['is_anomaly'],preds_lof)*100